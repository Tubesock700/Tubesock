
	# This script will find all OneDrives in your Tenant that are owned by a single user
	# and display the results in the console, along with adding them to a CSV on the user's
	# desktop that ran the script.
	# It will also gather homeDirectory sizes if requested and compare usage to OneDrive.
	# Example: 
	#  Get-AllOneDrives -tenanturl "tenant url here" -homeDriveCheck $true
	# Note - you will need to run the script as an Admin Account that has access to all of the
	# user home directories
	param (
		[Parameter(Mandatory = $true)]
		$tenanturl,
		[Parameter(Mandatory = $false)]
		[ValidateSet($True, $False)]
		$homeDriveCheck = $false
		
	)
	$date = Get-Date -f "MM_dd_HH_mm"
	Connect-SPOService -URL $tenanturl
	$outFile = [Environment]::GetFolderPath("Desktop") + "\$date OneDriveSites.csv"
	$Sites = Get-SPOSite -IncludePersonalSite $true -Limit All -Filter "URL -like '-my.sharepoint.com/'" | Sort-Object Title
	$results = @()
Try
{
	foreach ($s in $Sites)
	{
		[string]$name = $s.Title
		
		if ($name -match '['']')
		{
			$name = ""
			[string]$name1 = $name.split("''")[0]
			[string]$apostrophe = "`'`'"
			[string]$name2 = $name.split("''")[1]
			$name = $name1 + $apostrophe + $name2
		}
		elseif ($name.length -lt 2)
		{
			Write-Host -ForegroundColor Yellow -BackgroundColor Red "No Title, skipping."
			continue
		}
		if ($homeDriveCheck)
		{
			$ADAccount = Get-ADUser -Filter { DisplayName -like $name } -Properties DisplayName, homeDirectory -ErrorAction Continue | ?{ $_.homeDirectory.length -gt 2 }
			
			if ($ADAccount.Enabled -eq $false)
			{
				Write-Host -ForegroundColor Yellow -BackgroundColor Red "$($s.Title) is disabled, skipping."
				$results += [pscustomobject] @{
					Owner				   = $s.Owner
					OneDrive_Address	   = $s.Url
					OwnerName			   = $s.Title
					OneDriveUsed		   = "Disabled User"
					HomeDirectoryLocation  = "Disabled User"
					HomeDirectory_Usage_GB = "Disabled User"
				}
			}
			else
			{
				Write-Host -ForegroundColor Blue -BackgroundColor Black "Working on $Name"
				$xDriveSize = 0
				$size = 0
				[string]$path = $ADAccount.homeDirectory
				if ($path.length -lt 3)
				{
					$results += [pscustomobject] @{
						Owner				   = $s.Owner
						OneDrive_Address	   = $s.Url
						OwnerName			   = $s.Title
						OneDrive_Usage_GB	   = $name
						HomeDirectoryLocation  = $path
						HomeDirectory_Usage_GB = "Returned No X Drive"
					}
				}
				else
				{
					Get-ChildItem -Path $path -Recurse -ErrorAction Continue | %{ $size += $_.Length }
					$xDriveSize = [System.Math]::Round($size /1gb, 2)
					Write-Host -ForegroundColor Green -BackgroundColor Black "Xdrive size: $xDriveSize"
					$OneDriveSize = [System.Math]::Round(([int]($s.StorageUsageCurrent /1024)), 2)
					Write-Host -ForegroundColor Green -BackgroundColor Black "OneDrive size: $OneDriveSize"
					$results += [pscustomobject] @{
						Owner				   = $s.Owner
						OneDrive_Address	   = $s.Url
						OwnerName			   = $s.Title
						OneDrive_Usage_GB	   = $OneDriveSize
						HomeDirectoryLocation  = $ADAccount.HomeDirectory
						HomeDirectory_Usage_GB = $xDriveSize
					}
				}
			}
		}
		else
		{
			$ADAccount = Get-ADUser -Filter { DisplayName -like $name } -Properties DisplayName -ErrorAction Continue
			
			
			if ($ADAccount.Enabled -eq $false)
			{
				Write-Host -ForegroundColor Yellow -BackgroundColor Red "$($s.Title) is disabled, skipping."
				$results += [pscustomobject] @{
					Owner			  = $s.Owner
					OneDrive_Address  = $s.Url
					OwnerName		  = $s.Title
					OneDrive_Usage_GB = "Disabled User"
				}
			}
			else
			{
				Write-Host -ForegroundColor Blue -BackgroundColor Black "Working on $Name"
				$OneDriveSize = [System.Math]::Round(([int]($s.StorageUsageCurrent /1024)), 2)
				Write-Host -ForegroundColor Green -BackgroundColor Black "OneDrive size: $OneDriveSize"
				$results += [pscustomobject] @{
					Owner			  = $s.Owner
					OneDrive_Address  = $s.Url
					OwnerName		  = $s.Title
					OneDrive_Usage_GB = $OneDriveSize
				}
			}
		}
	}
}
catch
{
	Write-Error $_.Exception
}
Disconnect-SpoService
$results | Export-Csv $outFile -NoTypeInformation
